service:
  name: microlearning-note-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:

  tracing:
    lambda: true
    apiGateway: true

  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
   ES_ENDPOINT: https://vpc-notes-search-dev-3wuaj5ofgrjjcyj35wdxkcpxzu.us-east-1.es.amazonaws.com
   NOTES_TABLE : Note-${self:provider.stage}
   USER_ID_INDEX: UserIdIndex
   NOTE_S3_BUCKET: microlearning-note-${self:provider.stage}
   SIGNED_URL_EXPIRATION: 300

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Note Api
        description: Serverless application for creating and updating note items
    models:
      - name: NoteCreateRequest
        contentType: application/json
        schema: ${file(src/schemaModels/create-note-model.json)}
      - name: NoteUpdateRequest
        contentType: application/json
        schema: ${file(src/schemaModels/update-note-model.json)}

functions:

  Auth:
    name: ${self:service:name}-auth
    handler: src/lambda/auth/auth0Authorizer.handler

  GetNotes:
    name: ${self:service:name}-get-notes
    handler: src/lambda/http/getNotes.handler
    events:
      - http:
          method: get
          path: notes
          cors: true
    iamRoleStatementsName: get-notes-role-name
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}/index/UserIdIndex

  GetNote:
    name: ${self:service:name}-get-note
    handler: src/lambda/http/getNote.handler
    events:
      - http:
          method: get
          path: notes/{noteId}
          cors: true
    iamRoleStatementsName: get-note-role-name
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  CreateNote:
    name: ${self:service:name}-create-note
    handler: src/lambda/http/createNote.handler
    events:
      - http:
          method: post
          path: notes
          cors: true
          reqValidatorName: RequestBodyValidator
          request:
            schema: 
             application/json: ${file(src/schemaModels/create-note-model.json)}
    iamRoleStatementsName: create-note-role-name
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  UpdateNote:
    name: ${self:service:name}-update-note
    handler: src/lambda/http/updateNote.handler
    events:
      - http:
          method: patch
          path: notes/{noteId}
          cors: true
          reqValidatorName: RequestBodyValidator
          request:
            schema: 
             application/json: ${file(src/schemaModels/update-note-model.json)}
    iamRoleStatementsName: update-note-role-name
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  DeleteNote:
    name: ${self:service:name}-delete-note
    handler: src/lambda/http/deleteNote.handler
    events:
      - http:
          method: delete
          path: notes/{noteId}
          cors: true
    iamRoleStatementsName: delete-note-role-name
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.NOTES_TABLE}

  GenerateUploadUrl:
    name: ${self:service:name}-generate-upload-url
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: notes/{noteId}/attachment
          cors: true
    iamRoleStatementsName: generate-note-upload-url-role-name
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.NOTE_S3_BUCKET}/*

  SyncWithElasticsearch:
    name: ${self:service:name}-elastic-search
    handler: src/lambda/search/elasticSearchSync.handler
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt NotesTable.StreamArn
    iamRoleStatementsName: elastic-search-role-name
    iamRoleStatements:
      - Effect: Allow
        Action:
          - es:*
        Resource:
          - arn:aws:es:us-east-1:614747892264:domain/notes-search-dev

resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    NotesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S            
          - AttributeName: noteId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: noteId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_IMAGE
        TableName: ${self:provider.environment.NOTES_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USER_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE                
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index   

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.NOTE_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.NOTE_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket 
          
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi      